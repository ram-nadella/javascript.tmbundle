<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>nop</string>
	<key>command</key>
	<string>#!/usr/bin/env ruby

SUPPORT = ENV['TM_SUPPORT_PATH']

require SUPPORT + '/lib/ui'
require SUPPORT + '/lib/exit_codes'

target_word = ENV["TM_SELECTED_TEXT"] ? ENV["TM_SELECTED_TEXT"] : ENV["TM_CURRENT_WORD"]

# open a new window that will show MDN content
def show_documentation_window(doc_path)
  url = "http://developer.mozilla.org/en-US/docs#{doc_path}"
  markup = "&lt;meta http-equiv='Refresh' content='0;URL=#{url}'&gt;"
  TextMate.exit_show_html markup
end

# extract matches based on keyword
matches = `zgrep -w "${TM_SELECTED_TEXT:-$TM_CURRENT_WORD}\s" "$TM_BUNDLE_SUPPORT/mdn-reference.gz"`.split("\n")

if matches.length == 0
   TextMate::UI.tool_tip "No documentation for &lt;b&gt;#{target_word}&lt;/b&gt;", :format =&gt; :html
   exit
elsif matches.length == 1
   doc_path = matches[0].split(" ")[1]
   show_documentation_window doc_path
else
  # more than one match, present options as menu
  options = matches.map { |line| line.split(" ")[0] }
  selection = TextMate::UI.menu(options)
  unless selection == nil
    doc_path = matches[selection].split(" ")[1]
    show_documentation_window doc_path
  end
end

</string>
	<key>fallbackInput</key>
	<string>word</string>
	<key>input</key>
	<string>selection</string>
	<key>inputFormat</key>
	<string>text</string>
	<key>keyEquivalent</key>
	<string>^h</string>
	<key>name</key>
	<string>Documentation for Word / Selection</string>
	<key>outputCaret</key>
	<string>afterOutput</string>
	<key>outputFormat</key>
	<string>text</string>
	<key>outputLocation</key>
	<string>toolTip</string>
	<key>scope</key>
	<string>source.js</string>
	<key>semanticClass</key>
	<string>lookup.define.js</string>
	<key>uuid</key>
	<string>B4874A14-2491-465A-A349-61E4EBCF4700</string>
	<key>version</key>
	<integer>2</integer>
</dict>
</plist>
